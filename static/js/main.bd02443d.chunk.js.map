{"version":3,"sources":["redux/actions/index.js","components/Card.jsx","components/Pagination.jsx","containers/Albums.jsx","components/NotFound.jsx","components/PhotoCard.jsx","containers/AlbumDetails.jsx","App.js","serviceWorker.js","redux/reducers/index.js","index.js","redux/store/configureStore.js"],"names":["requestFailed","errorMessage","type","Card","title","name","link","className","to","Pagination","showPerPage","onPaginationChange","total","useState","counter","setCounter","numberOfButtons","Math","ceil","useEffect","value","onButtonClick","aria-label","onClick","Array","fill","map","el","index","connect","state","isFetching","albumsFetched","albums","users","dispatch","fetchAllAlbums","fetch","then","response","json","catch","fetchUsers","setAlbums","flag","setFlag","start","end","pagination","setPagination","length","i","count","modifiedAlbums","push","username","console","log","slice","id","key","NotFound","PhotoCard","url","src","alt","toUpperCase","photosFetched","photos","fetchPhotos","albumId","requestPhotos","actions","params","match","setPhotos","thumbnailUrl","App","exact","path","component","Albums","AlbumDetails","Boolean","window","location","hostname","initialState","action","store","createStore","reducers","composeWithDevTools","applyMiddleware","thunk","createLogger","configureStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.bd02443d.chunk.js","sourcesContent":["export const REQUEST_ALL_ALBUMS = \"REQUEST_ALBUMS\";\r\nexport const REQUEST_USERS = \"REQUEST_USERS\";\r\nexport const RECEIVE_USERS = \"RECEIVE_USERS\";\r\nexport const RECEIVE_ALL_ALBUMS = \"RECEIVE_ALBUMS\";\r\nexport const REQUEST_PHOTOS = \"REQUEST_PHOTOS\";\r\nexport const RECEIVE_PHOTOS = \"RECEIVE_PHOTOS\";\r\nexport const REQUEST_FAILED = \"REQUEST_FAILED\";\r\n\r\nexport const requestAllAlbums = () => ({\r\n  type: REQUEST_ALL_ALBUMS,\r\n});\r\n\r\nexport const receiveAllAlbums = (albums) => ({\r\n  type: RECEIVE_ALL_ALBUMS,\r\n  albums,\r\n});\r\n\r\nexport const requestFailed = (errorMessage) => ({\r\n  type: REQUEST_FAILED,\r\n  errorMessage,\r\n});\r\n\r\nexport const requestUsers = () => ({\r\n  type: REQUEST_USERS,\r\n});\r\n\r\nexport const receiveUsers = (users) => ({\r\n  type: RECEIVE_USERS,\r\n  users,\r\n});\r\nexport const requestPhotos = (albumId) => ({\r\n  type: REQUEST_PHOTOS,\r\n  albumId,\r\n});\r\n\r\nexport const receivePhotos = (photos) => ({\r\n  type: RECEIVE_PHOTOS,\r\n  photos,\r\n});\r\n\r\nexport const fetchAllAlbums = () => (dispatch) => {\r\n  dispatch(requestAllAlbums());\r\n  return fetch(\"https://jsonplaceholder.typicode.com/albums/\")\r\n    .then((response) => response.json())\r\n    .then((json) => dispatch(receiveAllAlbums(json)))\r\n    .catch(() =>\r\n      dispatch(\r\n        requestFailed(\r\n          \"Failed retrieving the Users albums, please try again later\"\r\n        )\r\n      )\r\n    );\r\n};\r\n\r\nexport const fetchUsers = () => (dispatch) => {\r\n  dispatch(requestUsers());\r\n  return fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n    .then((response) => response.json())\r\n    .then((json) => dispatch(receiveUsers(json)))\r\n    .catch(() =>\r\n      dispatch(\r\n        requestFailed(\"Failed retrieving the Users, please try again later\")\r\n      )\r\n    );\r\n};\r\n\r\nexport const fetchPhotos = (albumId) => (dispatch) => {\r\n  dispatch(requestPhotos(albumId));\r\n  return fetch(`https://jsonplaceholder.typicode.com/photos?albumId=${albumId}`)\r\n    .then((response) => response.json())\r\n    .then((json) => dispatch(receivePhotos(json)))\r\n    .catch(() =>\r\n      dispatch(\r\n        requestFailed(\r\n          \"Failed retrieving the albums photos, please try again later\"\r\n        )\r\n      )\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./../styles/card.scss\";\r\n\r\nconst Card = ({ title, name = \"dummy user\", link }) => {\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"title\">Album Title : {title}</div>\r\n      <div className=\"username\">\r\n        <span>User : {name}</span>\r\n        <Link to={link}>View More</Link>{\" \"}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./../styles/pagination.scss\";\r\n\r\nconst Pagination = ({ showPerPage, onPaginationChange, total }) => {\r\n  const [counter, setCounter] = useState(1);\r\n  const numberOfButtons = Math.ceil(total / showPerPage);\r\n\r\n  useEffect(() => {\r\n    const value = showPerPage * counter;\r\n    onPaginationChange(value - showPerPage, value);\r\n  }, [counter]);\r\n\r\n  const onButtonClick = (type) => {\r\n    if (type === \"prev\") {\r\n      if (counter === 1) {\r\n        setCounter(1);\r\n      } else {\r\n        setCounter(counter - 1);\r\n      }\r\n    } else if (type === \"next\") {\r\n      if (numberOfButtons === counter) {\r\n        setCounter(counter);\r\n      } else {\r\n        setCounter(counter + 1);\r\n      }\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"d-flex justify-content-center\">\r\n      <nav aria-label=\"Page navigation example\">\r\n        <ul className=\"pagination\">\r\n          <li className=\"page-item\">\r\n            <span\r\n              className={counter === 1 ? \"page-link inactive\" : \"page-link\"}\r\n              onClick={() => onButtonClick(\"prev\")}\r\n            >\r\n              Previous\r\n            </span>\r\n          </li>\r\n\r\n          {new Array(numberOfButtons).fill(\"\").map((el, index) => (\r\n            <li\r\n              className={`page-item ${index + 1 === counter ? \"active\" : null}`}\r\n            >\r\n              <span className=\"page-link\" onClick={() => setCounter(index + 1)}>\r\n                {index + 1}\r\n              </span>\r\n            </li>\r\n          ))}\r\n          <li className=\"page-item\">\r\n            <span\r\n              className={\r\n                counter === Math.ceil(total / showPerPage)\r\n                  ? \"page-link inactive\"\r\n                  : \"page-link\"\r\n              }\r\n              onClick={() => onButtonClick(\"next\")}\r\n            >\r\n              Next\r\n            </span>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Pagination;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"./../redux/actions/index\";\r\n\r\nimport Card from \"./../components/Card\";\r\n\r\nimport \"./../styles/albums.scss\";\r\nimport Pagination from \"../components/Pagination\";\r\n\r\nconst Albums = ({\r\n  isFetching,\r\n  errorMessage,\r\n  albumsFetched,\r\n  fetchAllAlbums,\r\n  fetchUsers,\r\n  users,\r\n}) => {\r\n  const [albums, setAlbums] = useState([]);\r\n  const [flag, setFlag] = useState(false);\r\n  const [showPerPage, setShowPerPage] = useState(5);\r\n  const [pagination, setPagination] = useState({\r\n    start: 0,\r\n    end: showPerPage,\r\n  });\r\n\r\n  const onPaginationChange = (start, end) => {\r\n    setPagination({ start: start, end: end });\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchAllAlbums();\r\n    fetchUsers();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (users.length > 0 && albumsFetched.length > 0) {\r\n      let count = 0,\r\n        i;\r\n      const modifiedAlbums = [];\r\n      for (i = 1; i <= albumsFetched.length; i++) {\r\n        modifiedAlbums.push({\r\n          ...albumsFetched[i - 1],\r\n          username: users[count].name,\r\n        });\r\n        if (i % 10 === 0) {\r\n          count++;\r\n        }\r\n      }\r\n      setAlbums(modifiedAlbums);\r\n    }\r\n  }, [albumsFetched, users]);\r\n\r\n  useEffect(() => {\r\n    setFlag(true);\r\n  }, [albums.length]);\r\n\r\n  const renderAlbums = () => {\r\n    if (!albums) return null;\r\n    console.log(albums);\r\n    return albums\r\n      .slice(pagination.start, pagination.end)\r\n      .map(({ title, id, username }) => (\r\n        <Card\r\n          key={id}\r\n          link={`/details/${id}/${username}/${title}`}\r\n          title={title}\r\n          name={username}\r\n        />\r\n      ));\r\n  };\r\n\r\n  return isFetching || !!errorMessage || !flag ? (\r\n    <div>{errorMessage || \"Loading Albums...\"}</div>\r\n  ) : (\r\n    <>\r\n      <div className=\"albums\">\r\n        <h1>List of Albums</h1>\r\n        {flag && renderAlbums()}\r\n      </div>\r\n      <Pagination\r\n        showPerPage={showPerPage}\r\n        onPaginationChange={onPaginationChange}\r\n        total={albums.length}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    errorMessage: state.errorMessage,\r\n    isFetching: state.isFetching,\r\n    albumsFetched: state.albums,\r\n    users: state.users,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  fetchAllAlbums: () => dispatch(actions.fetchAllAlbums()),\r\n  fetchUsers: () => dispatch(actions.fetchUsers()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Albums);\r\n","import React from \"react\";\r\n\r\nconst NotFound = () => {\r\n  return <div>There seems to be a problem with the link</div>;\r\n};\r\n\r\nexport default NotFound;\r\n","import React from \"react\";\r\nimport \"./../styles/photoCard.scss\";\r\n\r\nconst PhotoCard = ({ url, title }) => {\r\n  return (\r\n    <div className=\"photo-container\">\r\n      <div className=\"img-container\">\r\n        <img src={url} alt={title || \"placeholder photo\"} />\r\n      </div>\r\n      <div className=\"title\">{title?.toUpperCase()}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PhotoCard;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"./../redux/actions/index\";\r\nimport PhotoCard from \"./../components/PhotoCard\";\r\nimport Pagination from \"./../components/Pagination\";\r\nimport \"./../styles/albumDetails.scss\";\r\n\r\nconst AlbumDetails = ({\r\n  title,\r\n  fetchPhotos,\r\n  match: { params },\r\n  errorMessage,\r\n  isFetching,\r\n  photosFetched,\r\n}) => {\r\n  const [photos, setPhotos] = useState([]);\r\n  const [showPerPage, setShowPerPage] = useState(9);\r\n  const [pagination, setPagination] = useState({\r\n    start: 0,\r\n    end: showPerPage,\r\n  });\r\n\r\n  const onPaginationChange = (start, end) => {\r\n    setPagination({ start: start, end: end });\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchPhotos(params.albumId);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setPhotos(photosFetched);\r\n  }, [photosFetched]);\r\n\r\n  const renderPhotos = () => {\r\n    if (!photos) return null;\r\n    return photos\r\n      .slice(pagination.start, pagination.end)\r\n      .map(({ id, thumbnailUrl, title }) => (\r\n        <PhotoCard key={id} url={thumbnailUrl} title={title} />\r\n      ));\r\n  };\r\n\r\n  return isFetching || !!errorMessage ? (\r\n    <div>{errorMessage || \"Loading Album's Details...\"}</div>\r\n  ) : (\r\n    <>\r\n      <div className=\"detail-container\">\r\n        <h1>{params.title}</h1>\r\n        <h3>Uploaded by: {params.username}</h3>\r\n        <div className=\"photo-grid\">{renderPhotos()}</div>\r\n      </div>\r\n      <Pagination\r\n        showPerPage={showPerPage}\r\n        onPaginationChange={onPaginationChange}\r\n        total={photos.length}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    errorMessage: state.errorMessage,\r\n    isFetching: state.isFetching,\r\n    photosFetched: state.photos,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  fetchPhotos: (albumId) => dispatch(actions.fetchPhotos(albumId)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AlbumDetails);\r\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport Albums from \"./containers/Albums\";\nimport NotFound from \"./components/NotFound\";\nimport AlbumDetails from \"./containers/AlbumDetails\";\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <Switch>\n          <Route exact path=\"/\" component={Albums} />\n          <Route\n            path=\"/details/:albumId/:username/:title\"\n            component={AlbumDetails}\n          />\n          <Route component={NotFound} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n  REQUEST_USERS,\r\n  RECEIVE_USERS,\r\n  REQUEST_ALL_ALBUMS,\r\n  RECEIVE_ALL_ALBUMS,\r\n  REQUEST_FAILED,\r\n  REQUEST_PHOTOS,\r\n  RECEIVE_PHOTOS,\r\n} from \"../actions\";\r\n\r\nexport const initialState = {\r\n  isFetching: false,\r\n  errorMessage: null,\r\n  users: [],\r\n  albums: [],\r\n  photos: [],\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case REQUEST_USERS:\r\n      return {\r\n        ...state,\r\n        isFetching: true,\r\n        errorMessage: null,\r\n        users: [],\r\n      };\r\n    case RECEIVE_USERS:\r\n      const { users } = action;\r\n      return {\r\n        ...state,\r\n        isFetching: false,\r\n        users,\r\n      };\r\n    case REQUEST_ALL_ALBUMS:\r\n      return {\r\n        ...state,\r\n        isFetching: true,\r\n        errorMessage: null,\r\n        albums: [],\r\n      };\r\n    case RECEIVE_ALL_ALBUMS:\r\n      const { albums } = action;\r\n      return {\r\n        ...state,\r\n        isFetching: false,\r\n        albums,\r\n      };\r\n    case REQUEST_PHOTOS:\r\n      return {\r\n        ...state,\r\n        isFetching: true,\r\n        errorMessage: null,\r\n        photos: [],\r\n      };\r\n    case RECEIVE_PHOTOS:\r\n      const { photos } = action;\r\n      return {\r\n        ...state,\r\n        isFetching: false,\r\n        photos,\r\n      };\r\n    case REQUEST_FAILED:\r\n      const { errorMessage } = action;\r\n      return {\r\n        ...state,\r\n        isFetching: false,\r\n        errorMessage,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport configureStore from \"./redux/store/configureStore\";\n\nconst store = configureStore();\nReactDOM.render(\n  <React.StrictMode>\n    {\" \"}\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { createLogger } from \"redux-logger\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport reducers from \"../reducers\";\r\n\r\nconst configureStore = () => {\r\n  const store = createStore(\r\n    reducers,\r\n    composeWithDevTools(applyMiddleware(thunk, createLogger()))\r\n  );\r\n\r\n  return store;\r\n};\r\n\r\nexport default configureStore;\r\n"],"sourceRoot":""}